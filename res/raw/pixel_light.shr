attribute vec4 aPosition;
attribute vec2 aTextureCoord;
attribute vec3 aNormal;

varying vec2 vTextureCoord;
varying vec3 vPosition;
varying vec3 vNormal;

uniform mat4 m,v, mvp; // model, view matrix 

uniform mat3 uNormalMatrix;

void main() {

	vPosition = vec3(v*m * aPosition);
	vTextureCoord = aTextureCoord;
	
	// this will not work if object was rotate :(
	// need add v*rotationMatrix
	vNormal = normalize(uNormalMatrix * aNormal);
	
	gl_Position = mvp * aPosition;
	
	}

[FRAGMENT]

precision mediump float;

uniform vec3 uLightPos;
uniform float uLuminance;

varying vec3 vPosition;
varying vec2 vTextureCoord;
varying vec3 vNormal;

uniform sampler2D uBaseMap;

void main() {

	float distance = length(uLightPos - vPosition);
	vec3 lightVector = normalize(uLightPos - vPosition);
	float diffuse = max(dot(vNormal, lightVector), 0.1);
	diffuse = diffuse * (1.0 / (1.0 + (uLuminance * distance * distance)));
	gl_FragColor = texture2D(uBaseMap,vTextureCoord);
	gl_FragColor.rbg *= diffuse;
	
	}