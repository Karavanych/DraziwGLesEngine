attribute vec4 aPosition;
attribute vec2 aTextureCoord;
attribute vec3 aNormal;

attribute vec3 aTangent;
attribute vec3 aBinormal;

varying vec2 vTextureCoord;
varying vec3 vPosition;
varying vec3 vLightVector;
varying float vDistance;

uniform mat4 m,v, mvp; // model, view matrix

uniform mat3 uNormalMatrix;

uniform vec3 uLightPos;

void main() {

	vPosition = vec3(v*m * aPosition);		
	
	vTextureCoord = aTextureCoord;		
		
	gl_Position = mvp * aPosition;
	
	vec3 norm = normalize(uNormalMatrix*aNormal);
	vec3 tang = normalize(uNormalMatrix*aTangent); 
	vec3 bino = normalize(uNormalMatrix*aBinormal);	
		
	mat3 vTangentMat = mat3(tang, bino, norm);
	
	vLightVector = normalize((uLightPos - vPosition)*vTangentMat);
	vDistance = length(uLightPos - vPosition);
	
	}

[FRAGMENT]

precision mediump float;

uniform float uLuminance;

varying vec3 vPosition;
varying vec2 vTextureCoord;
varying vec3 vLightVector;
varying float vDistance;

uniform sampler2D uBaseMap;
uniform sampler2D uNormalMap;

void main() {
 	vec3 normal = texture2D(uNormalMap,vTextureCoord).xyz;
	
	float diffuse = max(dot(normal, normalize(vLightVector)), 0.1);
	diffuse = diffuse * (1.0 / (1.0 + (uLuminance * vDistance * vDistance)));
	gl_FragColor = texture2D(uBaseMap,vTextureCoord);
	gl_FragColor.rbg *= diffuse;
	
	}